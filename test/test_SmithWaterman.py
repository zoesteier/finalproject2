#from hw3 import SmithWaterman, readScoreMatrix
#import os
#
#PAM100, matorder = readScoreMatrix('PAM100')
#
#def test_alignment():
#    seq1 = 'SLEAAQKSNVTSSWAKASAAWGTAGPEFFMALFDAHDDVFAKFSGLFSGAAKGTVKNTPEMAAQAQSFKGLVSNWVDNLDNAGALEGQCKTFAANHKARGISAGQLEAAFKVLSGFMKSYGGDEGAWTAVAGALMGEIEPDM'
#    seq2 = 'ANKTRELCMKSLEHAKVDTSNEARQDGIDLYKHMFENYPPLRKYFKSREEYTAEDVQNDPFFAKQGQKILLACHVLCATYDDRETFNAYTRELLDRHARDHVHMPPEVWTDFWKLFEEYLGKKTTLDEPTKQAWHEIGREFAKEINK'
#
#    final, first, second, scorematrix = SmithWaterman(seq1, seq2, PAM100)
#    assert final == 25
    
    

## I did not have enough time to implement testing and CI. With more time, here are some tests that I think would be important to implement:
#    1. Test that Smith-Waterman algorithm produces correct alignments with correct scores depending on the input matrix.
#    2. Test that scores generated by the Smith-Waterman algorithm match the scores calculated directly from the aligned sequences. (This was done in the file, but not implemented as a test).
#    3. Test that simulated annealing algorithm on a simple test-case produces an improved matrix as expected.
#    4. Test that the best gap opening and gap extension penalties are found, and that the best matrix for these penalties is found.